/*
 *  Copyright (c) 2017 Marco Iorio (giorio94 at gmail dot com)
 *  This file is part of Share Your Files (SYF).
 *
 *  SYF is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  SYF is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.

 *  You should have received a copy of the GNU General Public License
 *  along with SYF.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "common.hpp"

#include <QList>
#include <QLocale>

// Register Enums::OperationalMode to the qt meta type system
static MetaTypeRegistration<Enums::OperationalMode>
    modeRegisterer("OperationalMode");

///
/// The string is generated by finding the most appropriated measure unit,
/// converting the amount of bytes in that unit, exporting the resulting
/// number as a correct string in the system locale to which the measure
/// unit is appended.
///
static QString bytesToHRFormat(double size)
{
    static const QStringList unitsList{" KB", " MB", " GB", " TB"};
    QString unit(" Bytes");
    QStringListIterator units(unitsList);

    while (size >= 1024.0 && units.hasNext()) {
        unit = units.next();
        size /= 1024.0;
    }
    return QLocale::system().toString(size, 'f', 2).append(unit);
}

///
/// The string is obtained through the helper function bytesToHRFormat(double).
///
QString sizeToHRFormat(quint64 size)
{
    return bytesToHRFormat(static_cast<double>(size));
}

///
/// The string is obtained through the helper function bytesToHRFormat(double).
///
QString speedToHRFormat(double speed)
{
    if (qIsInf(speed) || speed < 0) {
        speed = 0;
    }
    return bytesToHRFormat(speed).append("/s");
}

///
/// The string is generated by converting the time interval expressed in
/// milliseconds to a human readable format.
///
QString intervalToHRFormat(quint64 ms)
{
    if (ms == Constants::UNKNOWN_INTERVAL)
        return QString();

    quint64 seconds = ms / 1000;
    quint64 minutes = (seconds / 60) % 60;
    quint64 hours = seconds / 3600;
    seconds = seconds % 60;

    if (seconds == 0 && minutes == 0 && hours == 0) {
        seconds = 1;
    }

    QString sHours =
        QString::number(hours) +
        ((hours == 1) ? QObject::tr(" hour") : QObject::tr(" hours"));

    QString sMinutes =
        QString::number(minutes) +
        ((minutes == 1) ? QObject::tr(" minute") : QObject::tr(" minutes"));

    QString sSeconds =
        QString::number(seconds) +
        ((seconds == 1) ? QObject::tr(" second") : QObject::tr(" seconds"));

    QString interval;
    if (hours > 0) {
        interval = sHours;
        if (minutes > 0)
            interval += QObject::tr(" and ") + sMinutes;
    }

    else if (minutes > 0) {
        interval = sMinutes;
        if (seconds > 0)
            interval += QObject::tr(" and ") + sSeconds;
    }

    else {
        interval = sSeconds;
    }

    return interval;
}
